import sys
import os
import cv2
import sqlite3
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QPushButton,
    QFileDialog,
    QMessageBox,
    QDateEdit,
    QFrame,
    QGroupBox,
    QGridLayout,
    QSpacerItem,
    QSizePolicy,
)
from PyQt5.QtCore import Qt, QTimer, QDate
from PyQt5.QtGui import QImage, QPixmap, QFont, QPalette, QColor
from pyzbar import pyzbar
import winsound  # Th∆∞ vi·ªán ph√°t √¢m thanh (Windows)
import time
import pyperclip  # Th∆∞ vi·ªán ƒë·ªÉ sao ch√©p v√†o clipboard
from openpyxl import Workbook

class BarcodeReaderApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("·ª®ng d·ª•ng ƒê·ªçc Barcode")
        self.setGeometry(100, 100, 800, 700)
        self.setMinimumSize(800, 600)

        # Thi·∫øt l·∫≠p icon cho ·ª©ng d·ª•ng
        try:
            self.setWindowIcon(QPixmap("Logo.ico"))
        except:
            pass

        # T·∫°o widget ch√≠nh v√† layout
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setSpacing(15)
        self.main_layout.setContentsMargins(20, 20, 20, 20)

        # T·∫°o header
        self.create_header()

        # T·∫°o v√πng control
        self.create_control_panel()

        # T·∫°o v√πng hi·ªÉn th·ªã video
        self.create_video_panel()

        # T·∫°o v√πng k·∫øt qu·∫£
        self.create_result_panel()

        # Kh·ªüi t·∫°o webcam
        self.capture = cv2.VideoCapture(0)
        self.capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        self.capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

        # Timer ƒë·ªÉ c·∫≠p nh·∫≠t frame
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(30)  # C·∫≠p nh·∫≠t m·ªói 30ms

        # Timer ƒë·ªÉ reset tr·∫°ng th√°i
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(self.reset_status)
        self.status_timer.setSingleShot(True)

        # Bi·∫øn ƒë·ªÉ theo d√µi barcode cu·ªëi c√πng ƒë∆∞·ª£c ƒë·ªçc
        self.last_barcode = None
        self.last_beep_time = 0

        # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu SQLite
        self.init_database()

        # √Åp d·ª•ng stylesheet
        self.apply_stylesheet()

    def create_header(self):
        """T·∫°o header c·ªßa ·ª©ng d·ª•ng"""
        header_frame = QFrame()
        header_frame.setFrameStyle(QFrame.StyledPanel)
        header_frame.setMaximumHeight(80)
        header_layout = QHBoxLayout(header_frame)

        # Logo v√† ti√™u ƒë·ªÅ
        title_label = QLabel("üì± ·ª®ng d·ª•ng ƒê·ªçc Barcode")
        title_font = QFont("Arial", 18, QFont.Bold)
        title_label.setFont(title_font)
        title_label.setStyleSheet("color: #2c3e50;")

        # Th√¥ng tin phi√™n b·∫£n
        version_label = QLabel("v1.0")
        version_label.setStyleSheet("color: #7f8c8d; font-size: 12px;")

        header_layout.addWidget(title_label)
        header_layout.addStretch()
        header_layout.addWidget(version_label)

        self.main_layout.addWidget(header_frame)

    def create_control_panel(self):
        """T·∫°o panel ƒëi·ªÅu khi·ªÉn"""
        control_group = QGroupBox("‚öôÔ∏è C√†i ƒë·∫∑t Xu·∫•t Excel")
        control_group.setMaximumHeight(120)
        control_layout = QGridLayout(control_group)

        # T·ª´ ng√†y
        from_label = QLabel("T·ª´ ng√†y:")
        from_label.setStyleSheet("font-weight: bold; color: #2c3e50;")
        self.from_date = QDateEdit()
        self.from_date.setCalendarPopup(True)
        self.from_date.setDisplayFormat("dd/MM/yyyy")
        self.from_date.setDate(QDate.currentDate())
        self.from_date.setStyleSheet(
            """
            QDateEdit {
                padding: 8px;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                background-color: white;
                font-size: 12px;
            }
            QDateEdit:focus {
                border-color: #3498db;
            }
        """
        )

        # ƒê·∫øn ng√†y
        to_label = QLabel("ƒê·∫øn ng√†y:")
        to_label.setStyleSheet("font-weight: bold; color: #2c3e50;")
        self.to_date = QDateEdit()
        self.to_date.setCalendarPopup(True)
        self.to_date.setDisplayFormat("dd/MM/yyyy")
        self.to_date.setDate(QDate.currentDate())
        self.to_date.setStyleSheet(
            """
            QDateEdit {
                padding: 8px;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                background-color: white;
                font-size: 12px;
            }
            QDateEdit:focus {
                border-color: #3498db;
            }
        """
        )

        # N√∫t xu·∫•t Excel
        self.export_btn = QPushButton("üìä Xu·∫•t Excel")
        self.export_btn.clicked.connect(self.export_to_excel)
        self.export_btn.setStyleSheet(
            """
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:pressed {
                background-color: #229954;
            }
        """
        )

        control_layout.addWidget(from_label, 0, 0)
        control_layout.addWidget(self.from_date, 0, 1)
        control_layout.addWidget(to_label, 0, 2)
        control_layout.addWidget(self.to_date, 0, 3)
        control_layout.addWidget(self.export_btn, 0, 4)

        self.main_layout.addWidget(control_group)

    def create_video_panel(self):
        """T·∫°o panel hi·ªÉn th·ªã video"""
        video_group = QGroupBox("üìπ Camera")
        video_layout = QVBoxLayout(video_group)

        # Label ƒë·ªÉ hi·ªÉn th·ªã video t·ª´ webcam
        self.video_label = QLabel()
        self.video_label.setAlignment(Qt.AlignCenter)
        self.video_label.setMinimumSize(640, 360)
        self.video_label.setStyleSheet(
            """
            QLabel {
                border: 3px solid #bdc3c7;
                border-radius: 10px;
                background-color: #ecf0f1;
            }
        """
        )

        # Th√¥ng b√°o tr·∫°ng th√°i camera
        self.status_label = QLabel(
            "üü¢ Camera ƒëang ho·∫°t ƒë·ªông - ƒê∆∞a barcode v√†o khung h√¨nh"
        )
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet(
            """
            QLabel {
                color: #27ae60;
                font-weight: bold;
                font-size: 12px;
                padding: 5px;
            }
        """
        )

        video_layout.addWidget(self.video_label)
        video_layout.addWidget(self.status_label)

        self.main_layout.addWidget(video_group)

    def create_result_panel(self):
        """T·∫°o panel hi·ªÉn th·ªã k·∫øt qu·∫£"""
        result_group = QGroupBox("üìã K·∫øt qu·∫£ ƒë·ªçc barcode")
        result_layout = QVBoxLayout(result_group)

        # √î input ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ barcode
        self.result_input = QLineEdit()
        self.result_input.setReadOnly(True)
        self.result_input.setPlaceholderText("Barcode s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...")
        self.result_input.setStyleSheet(
            """
            QLineEdit {
                padding: 15px;
                border: 2px solid #3498db;
                border-radius: 8px;
                background-color: #f8f9fa;
                font-size: 16px;
                font-weight: bold;
                color: #2c3e50;
            }
            QLineEdit:focus {
                border-color: #2980b9;
                background-color: white;
            }
        """
        )

        # Th√¥ng tin b·ªï sung
        info_label = QLabel("üí° Barcode s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c sao ch√©p v√†o clipboard")
        info_label.setAlignment(Qt.AlignCenter)
        info_label.setStyleSheet(
            """
            QLabel {
                color: #7f8c8d;
                font-size: 11px;
                font-style: italic;
            }
        """
        )

        result_layout.addWidget(self.result_input)
        result_layout.addWidget(info_label)

        self.main_layout.addWidget(result_group)

    def apply_stylesheet(self):
        """√Åp d·ª•ng stylesheet cho to√†n b·ªô ·ª©ng d·ª•ng"""
        self.setStyleSheet(
            """
            QMainWindow {
                background-color: #f5f6fa;
            }
            QGroupBox {
                font-weight: bold;
                font-size: 13px;
                color: #2c3e50;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
            QLabel {
                color: #2c3e50;
            }
        """
        )

    def init_database(self):
        """Kh·ªüi t·∫°o file DB v√† b·∫£ng l∆∞u l·ªãch s·ª≠ qu√©t."""
        db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "barcodes.db")
        self.conn = sqlite3.connect(db_path)
        # T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥ (k√®m c√°c c·ªôt m·ªõi)
        self.conn.execute(
            """
            CREATE TABLE IF NOT EXISTS scans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                content TEXT NOT NULL,
                scanned_at TEXT NOT NULL,
                scan_date TEXT,
                scan_time TEXT
            )
            """
        )
        # ƒê·∫£m b·∫£o c√°c c·ªôt m·ªõi t·ªìn t·∫°i n·∫øu DB c≈©
        cursor = self.conn.cursor()
        cursor.execute("PRAGMA table_info(scans)")
        existing_cols = {row[1] for row in cursor.fetchall()}
        if "scan_date" not in existing_cols:
            self.conn.execute("ALTER TABLE scans ADD COLUMN scan_date TEXT")
        if "scan_time" not in existing_cols:
            self.conn.execute("ALTER TABLE scans ADD COLUMN scan_time TEXT")

        # Backfill t·ª´ scanned_at n·∫øu thi·∫øu
        self.conn.execute(
            "UPDATE scans SET scan_date = substr(scanned_at, 1, 10) WHERE scan_date IS NULL OR scan_date = ''"
        )
        self.conn.execute(
            "UPDATE scans SET scan_time = substr(scanned_at, 12, 8) WHERE scan_time IS NULL OR scan_time = ''"
        )

        # Index ph·ª•c v·ª• l·ªçc theo ng√†y
        self.conn.execute("CREATE INDEX IF NOT EXISTS idx_scans_scan_date ON scans(scan_date)")
        self.conn.execute("CREATE INDEX IF NOT EXISTS idx_scans_scanned_at ON scans(scanned_at)")
        self.conn.commit()

    def save_scan(self, content: str) -> None:
        """L∆∞u m·ªôt d√≤ng qu√©t v√†o DB v·ªõi th·ªùi gian h·ªá th·ªëng."""
        now = datetime.now()
        scanned_at = now.strftime("%Y-%m-%d %H:%M:%S")
        scan_date = now.strftime("%Y-%m-%d")
        scan_time = now.strftime("%H:%M:%S")
        self.conn.execute(
            "INSERT INTO scans(content, scanned_at, scan_date, scan_time) VALUES(?, ?, ?, ?)",
            (content, scanned_at, scan_date, scan_time),
        )
        self.conn.commit()

    def export_to_excel(self) -> None:
        """Xu·∫•t d·ªØ li·ªáu t·ª´ DB theo kho·∫£ng ng√†y ra file Excel (.xlsx)."""
        start_qdate: QDate = self.from_date.date()
        end_qdate: QDate = self.to_date.date()

        start_date = start_qdate.toString("yyyy-MM-dd")
        end_date = end_qdate.toString("yyyy-MM-dd")

        # ƒê·∫£m b·∫£o kho·∫£ng ng√†y h·ª£p l·ªá
        if start_qdate > end_qdate:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowTitle("‚ö†Ô∏è C·∫£nh b√°o")
            msg.setText("Kho·∫£ng ng√†y kh√¥ng h·ª£p l·ªá")
            msg.setInformativeText("'T·ª´ ng√†y' ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng 'ƒê·∫øn ng√†y'.")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec_()
            return

        cursor = self.conn.cursor()
        cursor.execute(
            """
            SELECT id, content, scan_date, scan_time
            FROM scans
            WHERE scan_date >= ? AND scan_date <= ?
            ORDER BY scan_date ASC, scan_time ASC
            """,
            (start_date, end_date),
        )
        rows = cursor.fetchall()

        if not rows:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("‚ÑπÔ∏è Th√¥ng b√°o")
            msg.setText("Kh√¥ng c√≥ d·ªØ li·ªáu")
            msg.setInformativeText(
                "Kh√¥ng t√¨m th·∫•y b·∫£n ghi n√†o trong kho·∫£ng ng√†y ƒë√£ ch·ªçn."
            )
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec_()
            return

        # H·ªôp tho·∫°i ch·ªçn n∆°i l∆∞u
        default_filename = f"barcode_scans_{start_date}_to_{end_date}.xlsx"
        save_path, _ = QFileDialog.getSaveFileName(
            self,
            "üíæ L∆∞u file Excel",
            os.path.join(os.path.expanduser("~"), "Desktop", default_filename),
            "Excel Files (*.xlsx)",
        )
        if not save_path:
            return

        # Ghi Excel b·∫±ng openpyxl v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp h∆°n
        wb = Workbook()
        ws = wb.active
        ws.title = "Barcode Scans"

        # ƒê·ªãnh d·∫°ng header
        headers = ["STT", "N·ªôi dung Barcode", "Ng√†y qu√©t", "Gi·ªù qu√©t"]
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = cell.font.copy(bold=True)
            cell.fill = cell.fill.copy(fill_type="solid", fgColor="CCCCCC")

        # Th√™m d·ªØ li·ªáu
        for row_idx, (rid, content, scan_date, scan_time) in enumerate(rows, 2):
            # ƒê·ªãnh d·∫°ng ng√†y hi·ªÉn th·ªã dd/MM/yyyy
            try:
                d_disp = datetime.strptime(scan_date, "%Y-%m-%d").strftime("%d/%m/%Y")
            except Exception:
                d_disp = scan_date or ""

            ws.cell(row=row_idx, column=1, value=row_idx - 1)  # STT
            ws.cell(row=row_idx, column=2, value=content)  # N·ªôi dung
            ws.cell(row=row_idx, column=3, value=d_disp)  # Ng√†y
            ws.cell(row=row_idx, column=4, value=scan_time)  # Gi·ªù

        # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width

        try:
            wb.save(save_path)
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("‚úÖ Th√†nh c√¥ng")
            msg.setText("ƒê√£ xu·∫•t Excel th√†nh c√¥ng!")
            msg.setInformativeText(f"File ƒë∆∞·ª£c l∆∞u t·∫°i:\n{save_path}")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec_()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowTitle("‚ùå L·ªói")
            msg.setText("Kh√¥ng th·ªÉ l∆∞u file")
            msg.setInformativeText(f"L·ªói: {e}")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec_()

    def update_frame(self):
        ret, frame = self.capture.read()
        if ret:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            # ƒê·ªçc barcode t·ª´ frame
            barcodes = pyzbar.decode(gray)

            # N·∫øu ph√°t hi·ªán barcode
            for barcode in barcodes:
                barcode_data = barcode.data.decode("utf-8")

                # Ki·ªÉm tra barcode c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng
                if True:
                    # Ch·ªâ ph√°t √¢m thanh, c·∫≠p nh·∫≠t v√† copy n·∫øu barcode m·ªõi ho·∫∑c sau 1 gi√¢y
                    current_time = time.time()
                    if barcode_data != self.last_barcode or (current_time - self.last_beep_time > 1):
                        self.result_input.setText(barcode_data)
                        self.play_beep_sound()
                        pyperclip.copy(barcode_data)  # Sao ch√©p barcode v√†o clipboard
                        self.save_scan(barcode_data)  # L∆∞u v√†o DB
                        self.last_barcode = barcode_data
                        self.last_beep_time = current_time

                        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                        self.status_label.setText("‚úÖ ƒê√£ ƒë·ªçc th√†nh c√¥ng barcode!")
                        self.status_label.setStyleSheet(
                            """
                            QLabel {
                                color: #27ae60;
                                font-weight: bold;
                                font-size: 12px;
                                padding: 5px;
                            }
                        """
                        )
                        # Reset tr·∫°ng th√°i sau 3 gi√¢y
                        self.status_timer.start(3000)

                # V·∫Ω khung bao quanh barcode v·ªõi m√†u s·∫Øc ƒë·∫πp h∆°n
                (x, y, w, h) = barcode.rect
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 3)
                # Th√™m text "BARCODE" ph√≠a tr√™n khung
                cv2.putText(
                    frame,
                    "BARCODE",
                    (x, y - 10),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.7,
                    (0, 255, 0),
                    2,
                )

            # Chuy·ªÉn frame sang ƒë·ªãnh d·∫°ng RGB
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            # Chuy·ªÉn th√†nh QImage
            h, w, ch = frame.shape
            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)

            # Chuy·ªÉn th√†nh QPixmap v√† hi·ªÉn th·ªã
            pixmap = QPixmap.fromImage(image)
            scaled_pixmap = pixmap.scaled(
                self.video_label.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation
            )
            self.video_label.setPixmap(scaled_pixmap)
        else:
            # N·∫øu kh√¥ng ƒë·ªçc ƒë∆∞·ª£c camera
            self.status_label.setText("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi camera")
            self.status_label.setStyleSheet(
                """
                QLabel {
                    color: #e74c3c;
                    font-weight: bold;
                    font-size: 12px;
                    padding: 5px;
                }
            """
            )

    def reset_status(self):
        """Reset tr·∫°ng th√°i v·ªÅ m·∫∑c ƒë·ªãnh"""
        self.status_label.setText(
            "üü¢ Camera ƒëang ho·∫°t ƒë·ªông - ƒê∆∞a barcode v√†o khung h√¨nh"
        )
        self.status_label.setStyleSheet(
            """
            QLabel {
                color: #27ae60;
                font-weight: bold;
                font-size: 12px;
                padding: 5px;
            }
        """
        )

    def play_beep_sound(self):
        """Ph√°t √¢m thanh b√≠p khi ƒë·ªçc th√†nh c√¥ng barcode"""
        try:
            # Ph√°t √¢m thanh b√≠p (Windows) - √¢m thanh vui v·∫ª h∆°n
            winsound.Beep(800, 150)  # T·∫ßn s·ªë 800Hz, th·ªùi gian 150ms
            time.sleep(0.05)
            winsound.Beep(1000, 150)  # T·∫ßn s·ªë 1000Hz, th·ªùi gian 150ms
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng th·ªÉ ph√°t √¢m thanh

    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        # D·ª´ng timers
        if hasattr(self, "timer"):
            self.timer.stop()
        if hasattr(self, "status_timer"):
            self.status_timer.stop()

        # Gi·∫£i ph√≥ng webcam khi ƒë√≥ng ·ª©ng d·ª•ng
        if hasattr(self, "capture"):
            self.capture.release()

        # ƒê√≥ng k·∫øt n·ªëi database
        try:
            if hasattr(self, "conn"):
                self.conn.close()
        except Exception:
            pass

        event.accept()

def main():
    app = QApplication(sys.argv)
    window = BarcodeReaderApp()
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
